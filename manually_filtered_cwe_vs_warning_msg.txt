CWE121_Stack_Based_Buffer_Overflow	accessing out of bounds index.
CWE121_Stack_Based_Buffer_Overflow	Assigned value is garbage or undefined
CWE121_Stack_Based_Buffer_Overflow	Does not check for buffer overflows when concatenating to destination (CWE-120). Consider using strcat_s, strncat, or strlcat (warning, strncat is easily misused).
CWE121_Stack_Based_Buffer_Overflow	Does not check for buffer overflows when copying to destination (CWE-120). Consider using strcpy_s, strncpy, or strlcpy (warning, strncpy is easily misused).
CWE121_Stack_Based_Buffer_Overflow	Does not check for buffer overflows when copying to destination (CWE-120). Make sure destination can always hold the source data.
CWE121_Stack_Based_Buffer_Overflow	Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers (CWE-120).
CWE121_Stack_Based_Buffer_Overflow	Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) (CWE-120). Consider strcat_s, strlcat, or automatically resizing strings.
CWE121_Stack_Based_Buffer_Overflow	out of bounds write.
CWE121_Stack_Based_Buffer_Overflow	Size argument is greater than the free space in the destination buffer
CWE121_Stack_Based_Buffer_Overflow	Size argument is greater than the length of the destination buffer
CWE121_Stack_Based_Buffer_Overflow	Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.
CWE121_Stack_Based_Buffer_Overflow	String copy function overflows destination buffer

CWE122_Heap_Based_Buffer_Overflow	accessing out of bounds index.
CWE122_Heap_Based_Buffer_Overflow	Assigned value is garbage or undefined
CWE122_Heap_Based_Buffer_Overflow	Does not check for buffer overflows when concatenating to destination (CWE-120). Consider using strcat_s, strncat, or strlcat (warning, strncat is easily misused).
CWE122_Heap_Based_Buffer_Overflow	Does not check for buffer overflows when copying to destination (CWE-120). Consider using strcpy_s, strncpy, or strlcpy (warning, strncpy is easily misused).
CWE122_Heap_Based_Buffer_Overflow	Does not check for buffer overflows when copying to destination (CWE-120). Make sure destination can always hold the source data.
CWE122_Heap_Based_Buffer_Overflow	Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers (CWE-120).
CWE122_Heap_Based_Buffer_Overflow	Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) (CWE-120). Consider strcat_s, strlcat, or automatically resizing strings.
CWE122_Heap_Based_Buffer_Overflow	out of bounds write.
CWE122_Heap_Based_Buffer_Overflow	Size argument is greater than the free space in the destination buffer
CWE122_Heap_Based_Buffer_Overflow	Size argument is greater than the length of the destination buffer
CWE122_Heap_Based_Buffer_Overflow	Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.
CWE122_Heap_Based_Buffer_Overflow	String copy function overflows destination buffer

CWE123_Write_What_Where_Condition	out of bounds write.

CWE124_Buffer_Underwrite	Array index -5 is out of bounds.
CWE124_Buffer_Underwrite	Assigned value is garbage or undefined
CWE124_Buffer_Underwrite	Does not check for buffer overflows when copying to destination (CWE-120). Consider using strcpy_s, strncpy, or strlcpy (warning, strncpy is easily misused).
CWE124_Buffer_Underwrite	Does not check for buffer overflows when copying to destination (CWE-120). Make sure destination can always hold the source data.
CWE124_Buffer_Underwrite	Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers (CWE-120).
CWE124_Buffer_Underwrite	out of bounds write.
CWE124_Buffer_Underwrite	Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.
CWE124_Buffer_Underwrite	Undefined behaviour, pointer arithmetic X is out of bounds.

CWE126_Buffer_Overread	accessing out of bounds index.
CWE126_Buffer_Overread	Array X accessed at index X, which is out of bounds.
CWE126_Buffer_Overread	Dereference of undefined pointer value
CWE126_Buffer_Overread	Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).
CWE126_Buffer_Overread	out of bounds read.
CWE126_Buffer_Overread	Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.

CWE127_Buffer_Underread	accessing out of bounds index.
CWE127_Buffer_Underread	Array index -5 is out of bounds.
CWE127_Buffer_Underread	Dereference of undefined pointer value
CWE127_Buffer_Underread	Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).
CWE127_Buffer_Underread	out of bounds read.
CWE127_Buffer_Underread	Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.
CWE127_Buffer_Underread	Undefined behaviour, pointer arithmetic X is out of bounds.

CWE134_Uncontrolled_Format_String	If format strings can be influenced by an attacker, they can be exploited (CWE-134). Use a constant for the format specification.

CWE190_Integer_Overflow	overflow in conversion from floating-point to integer.
CWE190_Integer_Overflow	signed overflow.
CWE190_Integer_Overflow	Unless checked, the resulting number can exceed the expected range (CWE-190). If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).

CWE191_Integer_Underflow	signed overflow.
CWE191_Integer_Underflow	Unless checked, the resulting number can exceed the expected range (CWE-190). If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).

CWE194_Unexpected_Sign_Extension	signed overflow.
CWE194_Unexpected_Sign_Extension	Size argument is greater than the length of the destination buffer
CWE194_Unexpected_Sign_Extension	Unless checked, the resulting number can exceed the expected range (CWE-190). If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).

CWE195_Signed_to_Unsigned_Conversion_Error	signed overflow.
CWE195_Signed_to_Unsigned_Conversion_Error	Size argument is greater than the length of the destination buffer
CWE195_Signed_to_Unsigned_Conversion_Error	Unless checked, the resulting number can exceed the expected range (CWE-190). If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).


CWE197_Numeric_Truncation_Error	Unless checked, the resulting number can exceed the expected range (CWE-190). If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).

CWE242_Use_of_Inherently_Dangerous_Function	Obsolete function X called. It is recommended to use X or X instead.

CWE369_Divide_by_Zero	division by zero.
CWE369_Divide_by_Zero	Division by zero
CWE369_Divide_by_Zero	Division by zero.

CWE377_Insecure_Temporary_File	Call to function X is insecure as it always creates or uses insecure temporary file.  Use X instead

CWE398_Poor_Code_Quality	Redundant assignment of X to itself.
CWE398_Poor_Code_Quality	Redundant code: Found a statement that begins with numeric constant.
CWE398_Poor_Code_Quality	Same expression on both sides of X.

CWE401_Memory_Leak	Common realloc mistake: X nulled but not freed upon failure
CWE401_Memory_Leak	Memory leak: X
CWE401_Memory_Leak	Potential leak of memory pointed to by X

CWE415_Double_Free	Attempt to free released memory
CWE415_Double_Free	Deallocating a deallocated pointer: X
CWE415_Double_Free	Memory pointed to by X is freed twice.

CWE416_Use_After_Free	Use of memory after it is freed

CWE440_Expected_Behavior_Violation	Exception thrown in function declared not to throw exceptions.

CWE457_Use_of_Uninitialized_Variable	accessing uninitialized left-value.
CWE457_Use_of_Uninitialized_Variable	Dereference of undefined pointer value
CWE457_Use_of_Uninitialized_Variable	Function call argument is an uninitialized value
CWE457_Use_of_Uninitialized_Variable	Uninitialized variable: X
CWE457_Use_of_Uninitialized_Variable	Variable X is not assigned a value.


CWE467_Use_of_sizeof_on_Pointer_Type	Result of X is converted to a pointer of type X, which is incompatible with sizeof operand type X
CWE467_Use_of_sizeof_on_Pointer_Type	Size of pointer X used instead of size of its data.

CWE469_Use_of_Pointer_Subtraction_to_Determine_Size	pointer subtraction.

CWE476_NULL_Pointer_Dereference	Access to field X results in a dereference of a null pointer (loaded from variable X)
CWE476_NULL_Pointer_Dereference	Array access (from variable X) results in a null pointer dereference
CWE476_NULL_Pointer_Dereference	Dereference of null pointer (loaded from variable X)
CWE476_NULL_Pointer_Dereference	Dereference of undefined pointer value
CWE476_NULL_Pointer_Dereference	Either the condition X is redundant or there is possible null pointer dereference: intPointer.
CWE476_NULL_Pointer_Dereference	Null pointer dereference: X
CWE476_NULL_Pointer_Dereference	Possible null pointer dereference: X

CWE480_Use_of_Incorrect_Operator	Same expression on both sides of X.

CWE481_Assigning_Instead_of_Comparing	Same expression on both sides of X.

CWE526_Info_Exposure_Environment_Variables	Environment variables are untrustable input if they can be set by an attacker. They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20). Check environment variables carefully before using them.

CWE562_Return_of_Stack_Variable_Address	accessing left-value that contains escaping addresses.

CWE563_Unused_Variable	Unused variable: X
CWE563_Unused_Variable	Value stored to X during its initialization is never read
CWE563_Unused_Variable	Value stored to X is never read
CWE563_Unused_Variable	 Variable X is assigned a value that is never used.
CWE563_Unused_Variable	Variable X is reassigned a value before the old one has been used.

CWE570_Expression_Always_False	Checking if unsigned variable X is less than zero.
CWE570_Expression_Always_False	Condition X is always false
CWE570_Expression_Always_False	Unnecessary comparison of static strings.

CWE571_Expression_Always_True	Condition X is always true
CWE571_Expression_Always_True	Same expression on both sides of X.
CWE571_Expression_Always_True	Unnecessary comparison of static strings.
CWE571_Expression_Always_True	Unsigned variable X can't be negative so it is unnecessary to test it.

CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer	accessing uninitialized left-value.
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer	Assigned value is garbage or undefined
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer	Dereference of undefined pointer value

CWE590_Free_Memory_Not_on_Heap	Argument to free() is the address of the local variable X, which is not memory allocated by malloc()
CWE590_Free_Memory_Not_on_Heap	Argument to free() is the address of the static variable X, which is not memory allocated by malloc()
CWE590_Free_Memory_Not_on_Heap	Argument to X is the address of the local variable X, which is not memory allocated by X
CWE590_Free_Memory_Not_on_Heap	Argument to X is the address of the static variable X, which is not memory allocated by X
CWE590_Free_Memory_Not_on_Heap	Deallocation of an auto-variable results in undefined behaviour.
CWE590_Free_Memory_Not_on_Heap	Memory allocated by alloca() should not be deallocated

CWE675_Duplicate_Operations_on_Resource	Deallocating a deallocated pointer: X
CWE675_Duplicate_Operations_on_Resource	Resource handle X freed twice.

CWE680_Integer_Overflow_to_Buffer_Overflow	Invalid malloc() argument nr 1. The value is -4 but the valid values are X.
CWE680_Integer_Overflow_to_Buffer_Overflow	Memory allocation size is negative.
CWE680_Integer_Overflow_to_Buffer_Overflow	out of bounds write.
CWE680_Integer_Overflow_to_Buffer_Overflow	signed overflow.
CWE680_Integer_Overflow_to_Buffer_Overflow	Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.
CWE680_Integer_Overflow_to_Buffer_Overflow	Suspicious code: sign conversion of data in calculation, even though data can have a negative value
CWE680_Integer_Overflow_to_Buffer_Overflow	Unless checked, the resulting number can exceed the expected range (CWE-190). If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).

CWE681_Incorrect_Conversion_Between_Numeric_Types	overflow in conversion from floating-point to integer.

CWE685_Function_Call_With_Incorrect_Number_of_Arguments	sprintf format string requires 2 parameters but only 1 is given.

CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument	%s in format string (no. 1) requires X but the argument type is X.

CWE761_Free_Pointer_Not_at_Start_of_Buffer	Argument to free() is offset by X byte from the start of memory allocated by malloc()
CWE761_Free_Pointer_Not_at_Start_of_Buffer	Argument to free() is offset by X bytes from the start of memory allocated by malloc()

CWE762_Mismatched_Memory_Management_Routines	Memory allocated by calloc() should be deallocated by free(), not X
CWE762_Mismatched_Memory_Management_Routines	Memory allocated by malloc() should be deallocated by free(), not X
CWE762_Mismatched_Memory_Management_Routines	Memory allocated by realloc() should be deallocated by free(), not X
CWE762_Mismatched_Memory_Management_Routines	Memory allocated by strdup() should be deallocated by free(), not X
CWE762_Mismatched_Memory_Management_Routines	Memory allocated by X should be deallocated by X, not free()
CWE762_Mismatched_Memory_Management_Routines	Memory allocated by X should be deallocated by X, not X
CWE762_Mismatched_Memory_Management_Routines	Mismatching allocation and deallocation: X

CWE775_Missing_Release_of_File_Descriptor_or_Handle	Resource leak: X
